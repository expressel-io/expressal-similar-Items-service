'use strict';

var mongoose = require('mongoose');

var seed = require('../seed.js');

mongoose.connect('mongodb://localhost/fetcher');

var db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function () {
  console.log('we are connected!');
});

var prodSchema = mongoose.Schema({
  prodId: Number,
  itemId: Number,
  price: String,
  deliveryCost: String,
  dateOfDelivery: String,
  desc: String,
  rating: Number,
  shopsAvalAt: String,
  img: String
});

var Prod = mongoose.model('Prod', prodSchema);
var imgPathArr = seed.generateImagePath();
var data = seed.populateData();

var saveList = function saveList(itemData, cb) {
  for (var i = 0; i < data.length; i++) {
    var newProd = new Prod({
      prodId: itemData[i].prodId,
      itemId: itemData[i].itemId,
      img: imgPathArr[i],
      price: itemData[i].price,
      deliveryCost: itemData[i].deliveryCost,
      dateOfDelivery: itemData[i].dateOfDelivery,
      desc: itemData[i].desc,
      rating: itemData[i].rating,
      shopsAvalAt: itemData[i].shopsAvalAt
    });
    newProd.save(cb);
  }
};

saveList(data, function (err, product) {
  if (err) {
    console.error(err);
  } else {
    console.log('prod', product);
  }
});

var find = function find(paramId, callback) {
  // Prod.find({}).sort('-size').limit(5).exec(callback);
  Prod.find({ "itemId": { $gt: paramId } }).limit(5).exec(callback);
};

var findPrevious = function findPrevious(paramId, callback) {
  // Prod.find({}).sort('-size').limit(5).exec(callback);
  Prod.find({
    "min": {
      $gte: paramId
    }
  });
};

var findById = function findById(paramId, callback) {
  Prod.find({ "itemId": paramId }).limit(5).exec(callback);
};

module.exports.saveList = saveList;
module.exports.find = find;
module.exports.findById = findById;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlL2luZGV4LmpzIl0sIm5hbWVzIjpbIm1vbmdvb3NlIiwicmVxdWlyZSIsInNlZWQiLCJjb25uZWN0IiwiZGIiLCJjb25uZWN0aW9uIiwib24iLCJjb25zb2xlIiwiZXJyb3IiLCJiaW5kIiwib25jZSIsImxvZyIsInByb2RTY2hlbWEiLCJTY2hlbWEiLCJwcm9kSWQiLCJOdW1iZXIiLCJpdGVtSWQiLCJwcmljZSIsIlN0cmluZyIsImRlbGl2ZXJ5Q29zdCIsImRhdGVPZkRlbGl2ZXJ5IiwiZGVzYyIsInJhdGluZyIsInNob3BzQXZhbEF0IiwiaW1nIiwiUHJvZCIsIm1vZGVsIiwiaW1nUGF0aEFyciIsImdlbmVyYXRlSW1hZ2VQYXRoIiwiZGF0YSIsInBvcHVsYXRlRGF0YSIsInNhdmVMaXN0IiwiaXRlbURhdGEiLCJjYiIsImkiLCJsZW5ndGgiLCJuZXdQcm9kIiwic2F2ZSIsImVyciIsInByb2R1Y3QiLCJmaW5kIiwicGFyYW1JZCIsImNhbGxiYWNrIiwiJGd0IiwibGltaXQiLCJleGVjIiwiZmluZFByZXZpb3VzIiwiJGd0ZSIsImZpbmRCeUlkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxXQUFXQyxRQUFRLFVBQVIsQ0FBakI7O0FBRUEsSUFBTUMsT0FBT0QsUUFBUSxZQUFSLENBQWI7O0FBRUFELFNBQVNHLE9BQVQsQ0FBaUIsNkJBQWpCOztBQUVBLElBQU1DLEtBQUtKLFNBQVNLLFVBQXBCO0FBQ0FELEdBQUdFLEVBQUgsQ0FBTSxPQUFOLEVBQWVDLFFBQVFDLEtBQVIsQ0FBY0MsSUFBZCxDQUFtQkYsT0FBbkIsRUFBNEIsbUJBQTVCLENBQWY7QUFDQUgsR0FBR00sSUFBSCxDQUFRLE1BQVIsRUFBZ0IsWUFBTTtBQUNwQkgsVUFBUUksR0FBUixDQUFZLG1CQUFaO0FBQ0QsQ0FGRDs7QUFJQSxJQUFNQyxhQUFhWixTQUFTYSxNQUFULENBQWdCO0FBQ2pDQyxVQUFRQyxNQUR5QjtBQUVqQ0MsVUFBUUQsTUFGeUI7QUFHakNFLFNBQU9DLE1BSDBCO0FBSWpDQyxnQkFBY0QsTUFKbUI7QUFLakNFLGtCQUFnQkYsTUFMaUI7QUFNakNHLFFBQU1ILE1BTjJCO0FBT2pDSSxVQUFRUCxNQVB5QjtBQVFqQ1EsZUFBYUwsTUFSb0I7QUFTakNNLE9BQUtOO0FBVDRCLENBQWhCLENBQW5COztBQVlBLElBQU1PLE9BQU96QixTQUFTMEIsS0FBVCxDQUFlLE1BQWYsRUFBdUJkLFVBQXZCLENBQWI7QUFDQSxJQUFNZSxhQUFhekIsS0FBSzBCLGlCQUFMLEVBQW5CO0FBQ0EsSUFBTUMsT0FBTzNCLEtBQUs0QixZQUFMLEVBQWI7O0FBR0EsSUFBTUMsV0FBVyxTQUFYQSxRQUFXLENBQUNDLFFBQUQsRUFBV0MsRUFBWCxFQUFrQjtBQUNqQyxPQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUwsS0FBS00sTUFBekIsRUFBaUNELEdBQWpDLEVBQXNDO0FBQ3BDLFFBQU1FLFVBQVUsSUFBSVgsSUFBSixDQUFTO0FBQ3ZCWCxjQUFRa0IsU0FBU0UsQ0FBVCxFQUFZcEIsTUFERztBQUV2QkUsY0FBUWdCLFNBQVNFLENBQVQsRUFBWWxCLE1BRkc7QUFHdkJRLFdBQUtHLFdBQVdPLENBQVgsQ0FIa0I7QUFJdkJqQixhQUFPZSxTQUFTRSxDQUFULEVBQVlqQixLQUpJO0FBS3ZCRSxvQkFBY2EsU0FBU0UsQ0FBVCxFQUFZZixZQUxIO0FBTXZCQyxzQkFBZ0JZLFNBQVNFLENBQVQsRUFBWWQsY0FOTDtBQU92QkMsWUFBTVcsU0FBU0UsQ0FBVCxFQUFZYixJQVBLO0FBUXZCQyxjQUFRVSxTQUFTRSxDQUFULEVBQVlaLE1BUkc7QUFTdkJDLG1CQUFhUyxTQUFTRSxDQUFULEVBQVlYO0FBVEYsS0FBVCxDQUFoQjtBQVdBYSxZQUFRQyxJQUFSLENBQWFKLEVBQWI7QUFDRDtBQUNGLENBZkQ7O0FBa0JBRixTQUFTRixJQUFULEVBQWUsVUFBQ1MsR0FBRCxFQUFNQyxPQUFOLEVBQWtCO0FBQy9CLE1BQUlELEdBQUosRUFBUztBQUNQL0IsWUFBUUMsS0FBUixDQUFjOEIsR0FBZDtBQUNELEdBRkQsTUFFTztBQUNML0IsWUFBUUksR0FBUixDQUFZLE1BQVosRUFBb0I0QixPQUFwQjtBQUNEO0FBQ0YsQ0FORDs7QUFRQSxJQUFNQyxPQUFPLFNBQVBBLElBQU8sQ0FBQ0MsT0FBRCxFQUFVQyxRQUFWLEVBQXVCO0FBQ2xDO0FBQ0FqQixPQUFLZSxJQUFMLENBQVUsRUFBRSxVQUFVLEVBQUVHLEtBQUtGLE9BQVAsRUFBWixFQUFWLEVBQTBDRyxLQUExQyxDQUFnRCxDQUFoRCxFQUFtREMsSUFBbkQsQ0FBd0RILFFBQXhEO0FBQ0QsQ0FIRDs7QUFLQSxJQUFNSSxlQUFlLFNBQWZBLFlBQWUsQ0FBQ0wsT0FBRCxFQUFVQyxRQUFWLEVBQXVCO0FBQzFDO0FBQ0FqQixPQUFLZSxJQUFMLENBQVU7QUFDUixXQUFRO0FBQ0pPLFlBQU9OO0FBREg7QUFEQSxHQUFWO0FBS0QsQ0FQRDs7QUFTQSxJQUFNTyxXQUFXLFNBQVhBLFFBQVcsQ0FBQ1AsT0FBRCxFQUFVQyxRQUFWLEVBQXVCO0FBQ3RDakIsT0FBS2UsSUFBTCxDQUFXLEVBQUUsVUFBV0MsT0FBYixFQUFYLEVBQW9DRyxLQUFwQyxDQUEwQyxDQUExQyxFQUE2Q0MsSUFBN0MsQ0FBa0RILFFBQWxEO0FBQ0QsQ0FGRDs7QUFJQU8sT0FBT0MsT0FBUCxDQUFlbkIsUUFBZixHQUEwQkEsUUFBMUI7QUFDQWtCLE9BQU9DLE9BQVAsQ0FBZVYsSUFBZixHQUFzQkEsSUFBdEI7QUFDQVMsT0FBT0MsT0FBUCxDQUFlRixRQUFmLEdBQTBCQSxRQUExQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG1vbmdvb3NlID0gcmVxdWlyZSgnbW9uZ29vc2UnKTtcblxuY29uc3Qgc2VlZCA9IHJlcXVpcmUoJy4uL3NlZWQuanMnKVxuXG5tb25nb29zZS5jb25uZWN0KCdtb25nb2RiOi8vbG9jYWxob3N0L2ZldGNoZXInKTtcblxuY29uc3QgZGIgPSBtb25nb29zZS5jb25uZWN0aW9uO1xuZGIub24oJ2Vycm9yJywgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUsICdjb25uZWN0aW9uIGVycm9yOicpKTtcbmRiLm9uY2UoJ29wZW4nLCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCd3ZSBhcmUgY29ubmVjdGVkIScpO1xufSk7XG5cbmNvbnN0IHByb2RTY2hlbWEgPSBtb25nb29zZS5TY2hlbWEoe1xuICBwcm9kSWQ6IE51bWJlcixcbiAgaXRlbUlkOiBOdW1iZXIsXG4gIHByaWNlOiBTdHJpbmcsXG4gIGRlbGl2ZXJ5Q29zdDogU3RyaW5nLFxuICBkYXRlT2ZEZWxpdmVyeTogU3RyaW5nLFxuICBkZXNjOiBTdHJpbmcsXG4gIHJhdGluZzogTnVtYmVyLFxuICBzaG9wc0F2YWxBdDogU3RyaW5nLFxuICBpbWc6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBQcm9kID0gbW9uZ29vc2UubW9kZWwoJ1Byb2QnLCBwcm9kU2NoZW1hKTtcbmNvbnN0IGltZ1BhdGhBcnIgPSBzZWVkLmdlbmVyYXRlSW1hZ2VQYXRoKCk7XG5jb25zdCBkYXRhID0gc2VlZC5wb3B1bGF0ZURhdGEoKTtcblxuXG5jb25zdCBzYXZlTGlzdCA9IChpdGVtRGF0YSwgY2IpID0+IHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbmV3UHJvZCA9IG5ldyBQcm9kKHtcbiAgICAgIHByb2RJZDogaXRlbURhdGFbaV0ucHJvZElkLFxuICAgICAgaXRlbUlkOiBpdGVtRGF0YVtpXS5pdGVtSWQsXG4gICAgICBpbWc6IGltZ1BhdGhBcnJbaV0sXG4gICAgICBwcmljZTogaXRlbURhdGFbaV0ucHJpY2UsXG4gICAgICBkZWxpdmVyeUNvc3Q6IGl0ZW1EYXRhW2ldLmRlbGl2ZXJ5Q29zdCxcbiAgICAgIGRhdGVPZkRlbGl2ZXJ5OiBpdGVtRGF0YVtpXS5kYXRlT2ZEZWxpdmVyeSxcbiAgICAgIGRlc2M6IGl0ZW1EYXRhW2ldLmRlc2MsXG4gICAgICByYXRpbmc6IGl0ZW1EYXRhW2ldLnJhdGluZyxcbiAgICAgIHNob3BzQXZhbEF0OiBpdGVtRGF0YVtpXS5zaG9wc0F2YWxBdCxcbiAgICB9KTtcbiAgICBuZXdQcm9kLnNhdmUoY2IpO1xuICB9XG59O1xuXG5cbnNhdmVMaXN0KGRhdGEsIChlcnIsIHByb2R1Y3QpID0+IHtcbiAgaWYgKGVycikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmxvZygncHJvZCcsIHByb2R1Y3QpO1xuICB9XG59KTtcblxuY29uc3QgZmluZCA9IChwYXJhbUlkLCBjYWxsYmFjaykgPT4ge1xuICAvLyBQcm9kLmZpbmQoe30pLnNvcnQoJy1zaXplJykubGltaXQoNSkuZXhlYyhjYWxsYmFjayk7XG4gIFByb2QuZmluZCh7IFwiaXRlbUlkXCI6IHsgJGd0OiBwYXJhbUlkIH0gfSkubGltaXQoNSkuZXhlYyhjYWxsYmFjayk7XG59O1xuXG5jb25zdCBmaW5kUHJldmlvdXMgPSAocGFyYW1JZCwgY2FsbGJhY2spID0+IHtcbiAgLy8gUHJvZC5maW5kKHt9KS5zb3J0KCctc2l6ZScpLmxpbWl0KDUpLmV4ZWMoY2FsbGJhY2spO1xuICBQcm9kLmZpbmQoe1xuICAgIFwibWluXCIgOiB7XG4gICAgICAgICRndGUgOiBwYXJhbUlkXG4gICAgfVxufSlcbn07XG5cbmNvbnN0IGZpbmRCeUlkID0gKHBhcmFtSWQsIGNhbGxiYWNrKSA9PiB7ICAgXG4gIFByb2QuZmluZCggeyBcIml0ZW1JZFwiIDogcGFyYW1JZCB9ICkubGltaXQoNSkuZXhlYyhjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5zYXZlTGlzdCA9IHNhdmVMaXN0O1xubW9kdWxlLmV4cG9ydHMuZmluZCA9IGZpbmQ7XG5tb2R1bGUuZXhwb3J0cy5maW5kQnlJZCA9IGZpbmRCeUlkO1xuIl19